{
    "sourceFile": "Test1.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1702459987398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702460128351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import cv2\n+import numpy as np\n+\n+def convert_image(image_path):\n+    # Load the original image\n+    original_image = cv2.imread(image_path)\n+\n+    # Split the image into four parts\n+    height, width, _ = original_image.shape\n+    half_width = width // 2\n+    half_height = height // 2\n+\n+    # Top-left: original color\n+    top_left = original_image[:half_height, :half_width]\n+\n+    # Top-right: no red and green components\n+    top_right = np.zeros_like(top_left)\n+    top_right[:, :, 0] = original_image[:half_height, half_width:, 0]  # Copy blue channel\n+    top_right[:, :, 1] = 0  # Set green channel to 0\n+    top_right[:, :, 2] = 0  # Set red channel to 0\n+\n+    # Bottom-left: no red and blue components\n+    bottom_left = np.zeros_like(top_left)\n+    bottom_left[:, :, 0] = 0  # Set red channel to 0\n+    bottom_left[:, :, 1] = original_image[half_height:, :half_width, 1]  # Copy green channel\n+    bottom_left[:, :, 2] = original_image[half_height:, :half_width, 2]  # Copy blue channel\n+\n+    # Bottom-right: no green and blue components\n+    bottom_right = np.zeros_like(top_left)\n+    bottom_right[:, :, 0] = original_image[half_height:, half_width:, 0]  # Copy blue channel\n+    bottom_right[:, :, 1] = 0  # Set green channel to 0\n+    bottom_right[:, :, 2] = 0  # Set red channel to 0\n+\n+    # Concatenate the four parts to get the final image\n+    result_image = np.concatenate((top_left, top_right, bottom_left, bottom_right), axis=1)\n+\n+    return result_image\n+\n+# Example usage\n+input_image_path = './images/Pic1.jpg';\n+output_image = convert_image(input_image_path)\n+\n+# Display the original and modified images\n+cv2.imshow('Original Image', cv2.imread(input_image_path))\n+cv2.imshow('Modified Image', output_image)\n+cv2.waitKey(0)\n+cv2.destroyAllWindows()\n"
                },
                {
                    "date": 1702460237071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,91 +1,29 @@\n import cv2\n import numpy as np\n \n def convert_image(image_path):\n-    # Load the original image\n     original_image = cv2.imread(image_path)\n+    h, w, _ = original_image.shape\n+    hw = w // 2\n+    hh = h // 2\n \n-    # Split the image into four parts\n-    height, width, _ = original_image.shape\n-    half_width = width // 2\n-    half_height = height // 2\n-\n-    # Top-left: original color\n-    top_left = original_image[:half_height, :half_width]\n-\n-    # Top-right: no red and green components\n+    top_left = original_image[:hh, :hw]\n     top_right = np.zeros_like(top_left)\n-    top_right[:, :, 0] = original_image[:half_height, half_width:, 0]  # Copy blue channel\n-    top_right[:, :, 1] = 0  # Set green channel to 0\n-    top_right[:, :, 2] = 0  # Set red channel to 0\n-\n-    # Bottom-left: no red and blue components\n+    top_right[:, :, 2] = original_image[:hh, hw:, 2]\n     bottom_left = np.zeros_like(top_left)\n-    bottom_left[:, :, 0] = 0  # Set red channel to 0\n-    bottom_left[:, :, 1] = original_image[half_height:, :half_width, 1]  # Copy green channel\n-    bottom_left[:, :, 2] = original_image[half_height:, :half_width, 2]  # Copy blue channel\n-\n-    # Bottom-right: no green and blue components\n+    bottom_left[:, :, 1] = original_image[hh:, :hw, 1]\n     bottom_right = np.zeros_like(top_left)\n-    bottom_right[:, :, 0] = original_image[half_height:, half_width:, 0]  # Copy blue channel\n-    bottom_right[:, :, 1] = 0  # Set green channel to 0\n-    bottom_right[:, :, 2] = 0  # Set red channel to 0\n+    bottom_right[:, :, 0] = original_image[hh:, hw:, 0]\n \n-    # Concatenate the four parts to get the final image\n     result_image = np.concatenate((top_left, top_right, bottom_left, bottom_right), axis=1)\n \n     return result_image\n \n # Example usage\n input_image_path = './images/Pic1.jpg';\n output_image = convert_image(input_image_path)\n \n-# Display the original and modified images\n-cv2.imshow('Original Image', cv2.imread(input_image_path))\n-cv2.imshow('Modified Image', output_image)\n+cv2.imshow('Original Images', cv2.imread(input_image_path))\n+cv2.imshow('Modified Images', output_image)\n cv2.waitKey(0)\n cv2.destroyAllWindows()\n-import cv2\n-import numpy as np\n-\n-def convert_image(image_path):\n-    # Load the original image\n-    original_image = cv2.imread(image_path)\n-\n-    # Split the image into four parts\n-    height, width, _ = original_image.shape\n-    half_width = width // 2\n-    half_height = height // 2\n-\n-    # Top-left: original color\n-    top_left = original_image[:half_height, :half_width]\n-\n-    # Top-right: no red and green components\n-    top_right = original_image[:half_height, half_width:]\n-    top_right[:, :, 0] = 0  # Set red channel to 0\n-    top_right[:, :, 1] = 0  # Set green channel to 0\n-\n-    # Bottom-left: no red and blue components\n-    bottom_left = original_image[half_height:, :half_width]\n-    bottom_left[:, :, 0] = 0  # Set red channel to 0\n-    bottom_left[:, :, 2] = 0  # Set blue channel to 0\n-\n-    # Bottom-right: no green and blue components\n-    bottom_right = original_image[half_height:, half_width:]\n-    bottom_right[:, :, 1] = 0  # Set green channel to 0\n-    bottom_right[:, :, 2] = 0  # Set blue channel to 0\n-\n-    # Concatenate the four parts to get the final image\n-    result_image = np.concatenate((top_left, top_right, bottom_left, bottom_right), axis=1)\n-\n-    return result_image\n-\n-# Example usage\n-input_image_path = './images/Pic1.jpg'\n-output_image = convert_image(input_image_path)\n-\n-# Display the original and modified images\n-cv2.imshow('Original Image', cv2.imread(input_image_path))\n-cv2.imshow('Modified Image', output_image)\n-cv2.waitKey(0)\n-cv2.destroyAllWindows()\n"
                },
                {
                    "date": 1702461565245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,7 +23,7 @@\n input_image_path = './images/Pic1.jpg';\n output_image = convert_image(input_image_path)\n \n cv2.imshow('Original Images', cv2.imread(input_image_path))\n-cv2.imshow('Modified Images', output_image)\n+cv2.imshow('Result of Images', output_image)\n cv2.waitKey(0)\n cv2.destroyAllWindows()\n"
                }
            ],
            "date": 1702459987398,
            "name": "Commit-0",
            "content": "import cv2\nimport numpy as np\n\ndef convert_image(image_path):\n    # Load the original image\n    original_image = cv2.imread(image_path)\n\n    # Split the image into four parts\n    height, width, _ = original_image.shape\n    half_width = width // 2\n    half_height = height // 2\n\n    # Top-left: original color\n    top_left = original_image[:half_height, :half_width]\n\n    # Top-right: no red and green components\n    top_right = original_image[:half_height, half_width:]\n    top_right[:, :, 0] = 0  # Set red channel to 0\n    top_right[:, :, 1] = 0  # Set green channel to 0\n\n    # Bottom-left: no red and blue components\n    bottom_left = original_image[half_height:, :half_width]\n    bottom_left[:, :, 0] = 0  # Set red channel to 0\n    bottom_left[:, :, 2] = 0  # Set blue channel to 0\n\n    # Bottom-right: no green and blue components\n    bottom_right = original_image[half_height:, half_width:]\n    bottom_right[:, :, 1] = 0  # Set green channel to 0\n    bottom_right[:, :, 2] = 0  # Set blue channel to 0\n\n    # Concatenate the four parts to get the final image\n    result_image = np.concatenate((top_left, top_right, bottom_left, bottom_right), axis=1)\n\n    return result_image\n\n# Example usage\ninput_image_path = './images/Pic1.jpg'\noutput_image = convert_image(input_image_path)\n\n# Display the original and modified images\ncv2.imshow('Original Image', cv2.imread(input_image_path))\ncv2.imshow('Modified Image', output_image)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n"
        }
    ]
}