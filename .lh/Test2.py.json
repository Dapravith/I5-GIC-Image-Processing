{
    "sourceFile": "Test2.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1702534445277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702536542598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,34 @@\n-import cv2 as cv\n+import cv2\n import numpy as np\n \n-def convert_to_grayscale(image_path):\n-    # Read the image\n-    img = cv.imread(image_path)\n+def convert_to_grayscale_better(image):\n+    if len(image.shape) == 3 and image.shape[2] == 3:  # Check if it's a BGR image\n+        # Extracting R, G, B channels\n+        blue_channel = image[:, :, 0]\n+        green_channel = image[:, :, 1]\n+        red_channel = image[:, :, 2]\n \n-    # Check if the image is loaded successfully\n-    if img is None:\n-        print(\"Error: Unable to load the image.\")\n-        return\n+        # Applying the formula: I = 0.299 * R + 0.587 * G + 0.114 * B\n+        grayscale_image = 0.299 * red_channel + 0.587 * green_channel + 0.114 * blue_channel\n \n-    # Get the height and width of the image\n-    height, width = img.shape[:2]\n+        # Convert to uint8 type (required for displaying with OpenCV)\n+        grayscale_image = grayscale_image.astype(np.uint8)\n \n-    # Create a new image with the same size as the original\n-    grayscale_img = np.zeros((height, width), dtype=np.uint8)\n+        return grayscale_image\n \n-    # Convert each pixel to grayscale using the formula: 0.299*R + 0.587*G + 0.114*B\n-    for h in range(height):\n-        for w in range(width):\n-            R = img[h, w, 0]\n-            G = img[h, w, 1]\n-            B = img[h, w, 2]\n-            grayscale_img[h, w] = int(0.299 * R + 0.587 * G + 0.114 * B)\n+    else:\n+        print(\"Input is not a BGR image.\")\n+        return None\n \n-    return grayscale_img\n+# Load the BGR image\n+image_path = './images/Test1.jpg'\n+bgr_image = cv2.imread(image_path)\n \n-def main():\n-    image_path = './images/Test1.jpg'\n-    grayscale_img = convert_to_grayscale(image_path)\n+# Convert to grayscale using the custom function\n+grayscale_image = convert_to_grayscale_better(bgr_image)\n \n-    # Display the original and grayscale images\n-    cv.imshow('Original Image', cv.imread(image_path))\n-    cv.imshow('Grayscale Image', grayscale_img)\n-    cv.waitKey(0)\n-    cv.destroyAllWindows()\n-\n-if __name__ == \"__main__\":\n-    main()\n+# Display the original and grayscale images\n+cv2.imshow('Original Image', bgr_image)\n+cv2.imshow('Grayscale Image', grayscale_image)\n+cv2.waitKey(0)\n+cv2.destroyAllWindows()\n"
                },
                {
                    "date": 1702536636905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import cv2\n import numpy as np\n \n-def convert_to_grayscale_better(image):\n+def convert_to_grayscale(image):\n     if len(image.shape) == 3 and image.shape[2] == 3:  # Check if it's a BGR image\n         # Extracting R, G, B channels\n         blue_channel = image[:, :, 0]\n         green_channel = image[:, :, 1]\n@@ -24,9 +24,9 @@\n image_path = './images/Test1.jpg'\n bgr_image = cv2.imread(image_path)\n \n # Convert to grayscale using the custom function\n-grayscale_image = convert_to_grayscale_better(bgr_image)\n+grayscale_image = convert_to_grayscaler(bgr_image)\n \n # Display the original and grayscale images\n cv2.imshow('Original Image', bgr_image)\n cv2.imshow('Grayscale Image', grayscale_image)\n"
                },
                {
                    "date": 1702536647961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n image_path = './images/Test1.jpg'\n bgr_image = cv2.imread(image_path)\n \n # Convert to grayscale using the custom function\n-grayscale_image = convert_to_grayscaler(bgr_image)\n+grayscale_image = convert_to_grayscale(bgr_image)\n \n # Display the original and grayscale images\n cv2.imshow('Original Image', bgr_image)\n cv2.imshow('Grayscale Image', grayscale_image)\n"
                }
            ],
            "date": 1702534445277,
            "name": "Commit-0",
            "content": "import cv2 as cv\nimport numpy as np\n\ndef convert_to_grayscale(image_path):\n    # Read the image\n    img = cv.imread(image_path)\n\n    # Check if the image is loaded successfully\n    if img is None:\n        print(\"Error: Unable to load the image.\")\n        return\n\n    # Get the height and width of the image\n    height, width = img.shape[:2]\n\n    # Create a new image with the same size as the original\n    grayscale_img = np.zeros((height, width), dtype=np.uint8)\n\n    # Convert each pixel to grayscale using the formula: 0.299*R + 0.587*G + 0.114*B\n    for h in range(height):\n        for w in range(width):\n            R = img[h, w, 0]\n            G = img[h, w, 1]\n            B = img[h, w, 2]\n            grayscale_img[h, w] = int(0.299 * R + 0.587 * G + 0.114 * B)\n\n    return grayscale_img\n\ndef main():\n    image_path = './images/Test1.jpg'\n    grayscale_img = convert_to_grayscale(image_path)\n\n    # Display the original and grayscale images\n    cv.imshow('Original Image', cv.imread(image_path))\n    cv.imshow('Grayscale Image', grayscale_img)\n    cv.waitKey(0)\n    cv.destroyAllWindows()\n\nif __name__ == \"__main__\":\n    main()\n"
        }
    ]
}