{
    "sourceFile": "ROTHA_Dapravith_e20190915_TP6.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1705546932388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1705570767044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,47 @@\n+from math import floor\n+import cv2\n+import numpy as np\n+img = cv2.imread('img/fruit3.jpg')\n+copy_img=np.array(img)\n+height,width,kernel=copy_img.shape\n+histoB=(256)*[0]\n+histoG=(256)*[0]\n+histoR=(256)*[0]\n+LUTB=(256)*[0]\n+LUTG=(256)*[0]\n+LUTR=(256)*[0]\n+for i in range(height):\n+    for j in range(width):\n+        r,g,b = img[i,j]\n+        histoR[r]+=1\n+        histoG[g]+=1\n+        histoB[b]+=1\n+#build histogram original\n+for i in range(256):\n+    #change if i ==0 so we give histogram equal to its index at 0\n+    \n+    if i ==0:\n+        histoB[i]=histoB[0]\n+        histoG[i]=histoB[0]\n+        histoR[i]=histoR[0]\n+    else:\n+        #check the rest calculate like take current index + index-1\n+        histoB[i]=histoB[i]+histoB[i-1]\n+        histoG[i]=histoG[i]+histoG[i-1]\n+        histoR[i]=histoR[i]+histoR[i-1]\n+#transform histogram\n+for i in range(256):\n+    LUTB[i] = (float(histoB[i])/float(width*height))*255\n+    LUTG[i] = (float(histoG[i])/float(width*height))*255\n+    LUTR[i] = (float(histoR[i])/float(width*height))*255\n+for i in range(height):\n+    for j in range(width):\n+        # Write your code here\n+          r,g,b = img[i,j]\n+          copy_img[i,j,0]= LUTB[b]\n+          copy_img[i,j,2]= LUTB[r]\n+          copy_img[i,j,1]= LUTB[g]\n \n+cv2.imshow('Histogram',copy_img)\n+cv2.imshow(\"Original\",img)\n+cv2.waitKey()\n"
                },
                {
                    "date": 1705570775098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from math import floor\n import cv2\n import numpy as np\n-img = cv2.imread('img/fruit3.jpg')\n+img = cv2.imread('images/fruit3.jpg')\n copy_img=np.array(img)\n height,width,kernel=copy_img.shape\n histoB=(256)*[0]\n histoG=(256)*[0]\n"
                },
                {
                    "date": 1705570841048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from math import floor\n import cv2\n import numpy as np\n-img = cv2.imread('images/fruit3.jpg')\n+img = cv2.imread('img/fruit3.jpg')\n copy_img=np.array(img)\n height,width,kernel=copy_img.shape\n histoB=(256)*[0]\n histoG=(256)*[0]\n"
                },
                {
                    "date": 1705570918348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from math import floor\n import cv2\n import numpy as np\n-img = cv2.imread('img/fruit3.jpg')\n+img = cv2.imread('images/fruit3.jpg')\n copy_img=np.array(img)\n height,width,kernel=copy_img.shape\n histoB=(256)*[0]\n histoG=(256)*[0]\n"
                },
                {
                    "date": 1706060176072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,56 @@\n-from math import floor\n import cv2\n import numpy as np\n+\n+# Load the image\n img = cv2.imread('images/fruit3.jpg')\n-copy_img=np.array(img)\n-height,width,kernel=copy_img.shape\n-histoB=(256)*[0]\n-histoG=(256)*[0]\n-histoR=(256)*[0]\n-LUTB=(256)*[0]\n-LUTG=(256)*[0]\n-LUTR=(256)*[0]\n+\n+# Ensure img is not empty\n+if img is None:\n+    print(\"Error: Image not found!\")\n+    exit()\n+\n+# Get image dimensions\n+height, width, _ = img.shape\n+\n+# Initialize histograms and LUTs for each color channel\n+histoB = np.zeros(256, np.int)\n+histoG = np.zeros(256, np.int)\n+histoR = np.zeros(256, np.int)\n+LUTB = np.zeros(256)\n+LUTG = np.zeros(256)\n+LUTR = np.zeros(256)\n+\n+# Calculate the histogram for each color channel\n for i in range(height):\n     for j in range(width):\n-        r,g,b = img[i,j]\n-        histoR[r]+=1\n-        histoG[g]+=1\n-        histoB[b]+=1\n-#build histogram original\n-for i in range(256):\n-    #change if i ==0 so we give histogram equal to its index at 0\n-    \n-    if i ==0:\n-        histoB[i]=histoB[0]\n-        histoG[i]=histoB[0]\n-        histoR[i]=histoR[0]\n-    else:\n-        #check the rest calculate like take current index + index-1\n-        histoB[i]=histoB[i]+histoB[i-1]\n-        histoG[i]=histoG[i]+histoG[i-1]\n-        histoR[i]=histoR[i]+histoR[i-1]\n-#transform histogram\n-for i in range(256):\n-    LUTB[i] = (float(histoB[i])/float(width*height))*255\n-    LUTG[i] = (float(histoG[i])/float(width*height))*255\n-    LUTR[i] = (float(histoR[i])/float(width*height))*255\n+        b, g, r = img[i, j]\n+        histoB[b] += 1\n+        histoG[g] += 1\n+        histoR[r] += 1\n+\n+# Calculate the cumulative histogram (cumulative distribution function)\n+for i in range(1, 256):\n+    histoB[i] += histoB[i - 1]\n+    histoG[i] += histoG[i - 1]\n+    histoR[i] += histoR[i - 1]\n+\n+# Normalize the histograms and calculate LUT\n+total_pixels = width * height\n+LUTB = (histoB / total_pixels) * 255\n+LUTG = (histoG / total_pixels) * 255\n+LUTR = (histoR / total_pixels) * 255\n+\n+# Apply histogram equalization\n+equalized_img = np.zeros_like(img)\n for i in range(height):\n     for j in range(width):\n-        # Write your code here\n-          r,g,b = img[i,j]\n-          copy_img[i,j,0]= LUTB[b]\n-          copy_img[i,j,2]= LUTB[r]\n-          copy_img[i,j,1]= LUTB[g]\n+        b, g, r = img[i, j]\n+        equalized_img[i, j, 0] = LUTB[b]\n+        equalized_img[i, j, 1] = LUTG[g]\n+        equalized_img[i, j, 2] = LUTR[r]\n \n-cv2.imshow('Histogram',copy_img)\n-cv2.imshow(\"Original\",img)\n-cv2.waitKey()\n+# Display the original and equalized images\n+cv2.imshow('Original', img)\n+cv2.imshow('Histogram Equalized', equalized_img)\n+cv2.waitKey(0)\n+cv2.destroyAllWindows()\n"
                },
                {
                    "date": 1706060205734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import cv2\n+import cv2 as cv;\n import numpy as np\n \n # Load the image\n img = cv2.imread('images/fruit3.jpg')\n"
                },
                {
                    "date": 1706060215969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,56 +1,47 @@\n-import cv2 as cv;\n+from math import floor\n+import cv2\n import numpy as np\n-\n-# Load the image\n img = cv2.imread('images/fruit3.jpg')\n-\n-# Ensure img is not empty\n-if img is None:\n-    print(\"Error: Image not found!\")\n-    exit()\n-\n-# Get image dimensions\n-height, width, _ = img.shape\n-\n-# Initialize histograms and LUTs for each color channel\n-histoB = np.zeros(256, np.int)\n-histoG = np.zeros(256, np.int)\n-histoR = np.zeros(256, np.int)\n-LUTB = np.zeros(256)\n-LUTG = np.zeros(256)\n-LUTR = np.zeros(256)\n-\n-# Calculate the histogram for each color channel\n+copy_img=np.array(img)\n+height,width,kernel=copy_img.shape\n+histoB=(256)*[0]\n+histoG=(256)*[0]\n+histoR=(256)*[0]\n+LUTB=(256)*[0]\n+LUTG=(256)*[0]\n+LUTR=(256)*[0]\n for i in range(height):\n     for j in range(width):\n-        b, g, r = img[i, j]\n-        histoB[b] += 1\n-        histoG[g] += 1\n-        histoR[r] += 1\n-\n-# Calculate the cumulative histogram (cumulative distribution function)\n-for i in range(1, 256):\n-    histoB[i] += histoB[i - 1]\n-    histoG[i] += histoG[i - 1]\n-    histoR[i] += histoR[i - 1]\n-\n-# Normalize the histograms and calculate LUT\n-total_pixels = width * height\n-LUTB = (histoB / total_pixels) * 255\n-LUTG = (histoG / total_pixels) * 255\n-LUTR = (histoR / total_pixels) * 255\n-\n-# Apply histogram equalization\n-equalized_img = np.zeros_like(img)\n+        r,g,b = img[i,j]\n+        histoR[r]+=1\n+        histoG[g]+=1\n+        histoB[b]+=1\n+#build histogram original\n+for i in range(256):\n+    #change if i ==0 so we give histogram equal to its index at 0\n+    \n+    if i ==0:\n+        histoB[i]=histoB[0]\n+        histoG[i]=histoB[0]\n+        histoR[i]=histoR[0]\n+    else:\n+        #check the rest calculate like take current index + index-1\n+        histoB[i]=histoB[i]+histoB[i-1]\n+        histoG[i]=histoG[i]+histoG[i-1]\n+        histoR[i]=histoR[i]+histoR[i-1]\n+#transform histogram\n+for i in range(256):\n+    LUTB[i] = (float(histoB[i])/float(width*height))*255\n+    LUTG[i] = (float(histoG[i])/float(width*height))*255\n+    LUTR[i] = (float(histoR[i])/float(width*height))*255\n for i in range(height):\n     for j in range(width):\n-        b, g, r = img[i, j]\n-        equalized_img[i, j, 0] = LUTB[b]\n-        equalized_img[i, j, 1] = LUTG[g]\n-        equalized_img[i, j, 2] = LUTR[r]\n+        # Write your code here\n+          r,g,b = img[i,j]\n+          copy_img[i,j,0]= LUTB[b]\n+          copy_img[i,j,2]= LUTB[r]\n+          copy_img[i,j,1]= LUTB[g]\n \n-# Display the original and equalized images\n-cv2.imshow('Original', img)\n-cv2.imshow('Histogram Equalized', equalized_img)\n-cv2.waitKey(0)\n-cv2.destroyAllWindows()\n+cv2.imshow('Histogram',copy_img)\n+cv2.imshow(\"Original\",img)\n+cv2.waitKey()\n"
                },
                {
                    "date": 1706061315620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from math import floor\n-import cv2\n+import cv2 as cv;\n import numpy as np\n img = cv2.imread('images/fruit3.jpg')\n copy_img=np.array(img)\n height,width,kernel=copy_img.shape\n"
                },
                {
                    "date": 1706061329565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from math import floor\n-import cv2 as cv;\n+import cv2\n import numpy as np\n img = cv2.imread('images/fruit3.jpg')\n copy_img=np.array(img)\n height,width,kernel=copy_img.shape\n"
                },
                {
                    "date": 1706061504809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+# TP6: Write the missing code that can calculate the histogram equalized (color) image.\n+\n+from math import floor\n+import cv2\n+import numpy as np\n+img = cv2.imread('images/fruit3.jpg')\n+copy_img=np.array(img)\n+height,width,kernel=copy_img.shape\n+histoB=(256)*[0]\n+histoG=(256)*[0]\n+histoR=(256)*[0]\n+LUTB=(256)*[0]\n+LUTG=(256)*[0]\n+LUTR=(256)*[0]\n+for i in range(height):\n+    for j in range(width):\n+        r,g,b = img[i,j]\n+        histoR[r]+=1\n+        histoG[g]+=1\n+        histoB[b]+=1\n+#build histogram original\n+for i in range(256):\n+    #change if i ==0 so we give histogram equal to its index at 0\n+    \n+    if i ==0:\n+        histoB[i]=histoB[0]\n+        histoG[i]=histoB[0]\n+        histoR[i]=histoR[0]\n+    else:\n+        #check the rest calculate like take current index + index-1\n+        histoB[i]=histoB[i]+histoB[i-1]\n+        histoG[i]=histoG[i]+histoG[i-1]\n+        histoR[i]=histoR[i]+histoR[i-1]\n+#transform histogram\n+for i in range(256):\n+    LUTB[i] = (float(histoB[i])/float(width*height))*255\n+    LUTG[i] = (float(histoG[i])/float(width*height))*255\n+    LUTR[i] = (float(histoR[i])/float(width*height))*255\n+for i in range(height):\n+    for j in range(width):\n+        # Write your code here\n+          r,g,b = img[i,j]\n+          copy_img[i,j,0]= LUTB[b]\n+          copy_img[i,j,2]= LUTB[r]\n+          copy_img[i,j,1]= LUTB[g]\n+\n+cv2.imshow('Histogram',copy_img)\n+cv2.imshow(\"Original\",img)\n+cv2.waitKey()\n"
                },
                {
                    "date": 1706062351059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+import cv2\n+\n+image = cv2.imread(\"./images/glass.jpg\", cv2.IMREAD_COLOR)\n+\n+# Option function\n+\n+def resizeImage():\n+    h, w, c = image.shape\n+    rows = int(w/4)\n+    cols = int(h/4)\n+\n+    img = cv2.resize(image, (rows, cols))\n+\n+    return img\n+\n+\n+def histogram_equalisation():\n+\n+    image = resizeImage()\n+    imgEqual = image\n+\n+    hight = image.shape[0]\n+    width = image.shape[1]\n+\n+    histoB = [0]*256\n+    histoG = [0]*256\n+    histoR = [0]*256\n+\n+    LUTB = [0]*256\n+    LUTG = [0]*256\n+    LUTR = [0]*256\n+\n+    for i in range(0, hight):\n+        for j in range(0, width):\n+            intensityB = image[i, j][0]\n+            intensityG = image[i, j][1]\n+            intensityR = image[i, j][2]\n+\n+            histoB[intensityB] += 1\n+            histoG[intensityG] += 1\n+            histoR[intensityR] += 1\n+\n+    for i in range(0, 256):\n+        if (i == 0):\n+            histoB[i] = histoB[0]\n+            histoG[i] = histoG[0]\n+            histoR[i] = histoR[0]\n+        else:\n+            histoB[i] = histoB[i]+histoB[i-1]\n+            histoG[i] = histoG[i]+histoG[i-1]\n+            histoR[i] = histoR[i]+histoR[i-1]\n+\n+    for i in range(0, 256):\n+        LUTB[i] = (float(histoB[i])/float(width*hight))*255\n+        LUTG[i] = (float(histoG[i])/float(width*hight))*255\n+        LUTR[i] = (float(histoR[i])/float(width*hight))*255\n+\n+    for i in range(0, hight):\n+        for j in range(0, width):\n+            b = image[i, j][0]\n+            g = image[i, j][1]\n+            r = image[i, j][2]\n+\n+            r = int(LUTR[r])\n+            g = int(LUTG[g])\n+            b = int(LUTB[b])\n+\n+            imgEqual[i, j][0] = b\n+            imgEqual[i, j][1] = g\n+            imgEqual[i, j][2] = r\n+\n+    cv2.namedWindow(\"Histogram_Equalization\", cv2.WINDOW_AUTOSIZE)\n+    cv2.imshow(\"Histogram_Equalization\", imgEqual)\n+\n+image = resizeImage()\n+\n+cv2.namedWindow(\"Original\", cv2.WINDOW_AUTOSIZE)\n+cv2.imshow(\"Original\", image)\n+\n+histogram_equalisation()\n+\n+cv2.waitKey(0)\n+cv2.destroyAllWindows()\n"
                },
                {
                    "date": 1706062432677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,93 +1,10 @@\n-import cv2\n-\n-image = cv2.imread(\"./images/glass.jpg\", cv2.IMREAD_COLOR)\n-\n-# Option function\n-\n-def resizeImage():\n-    h, w, c = image.shape\n-    rows = int(w/4)\n-    cols = int(h/4)\n-\n-    img = cv2.resize(image, (rows, cols))\n-\n-    return img\n-\n-\n-def histogram_equalisation():\n-\n-    image = resizeImage()\n-    imgEqual = image\n-\n-    hight = image.shape[0]\n-    width = image.shape[1]\n-\n-    histoB = [0]*256\n-    histoG = [0]*256\n-    histoR = [0]*256\n-\n-    LUTB = [0]*256\n-    LUTG = [0]*256\n-    LUTR = [0]*256\n-\n-    for i in range(0, hight):\n-        for j in range(0, width):\n-            intensityB = image[i, j][0]\n-            intensityG = image[i, j][1]\n-            intensityR = image[i, j][2]\n-\n-            histoB[intensityB] += 1\n-            histoG[intensityG] += 1\n-            histoR[intensityR] += 1\n-\n-    for i in range(0, 256):\n-        if (i == 0):\n-            histoB[i] = histoB[0]\n-            histoG[i] = histoG[0]\n-            histoR[i] = histoR[0]\n-        else:\n-            histoB[i] = histoB[i]+histoB[i-1]\n-            histoG[i] = histoG[i]+histoG[i-1]\n-            histoR[i] = histoR[i]+histoR[i-1]\n-\n-    for i in range(0, 256):\n-        LUTB[i] = (float(histoB[i])/float(width*hight))*255\n-        LUTG[i] = (float(histoG[i])/float(width*hight))*255\n-        LUTR[i] = (float(histoR[i])/float(width*hight))*255\n-\n-    for i in range(0, hight):\n-        for j in range(0, width):\n-            b = image[i, j][0]\n-            g = image[i, j][1]\n-            r = image[i, j][2]\n-\n-            r = int(LUTR[r])\n-            g = int(LUTG[g])\n-            b = int(LUTB[b])\n-\n-            imgEqual[i, j][0] = b\n-            imgEqual[i, j][1] = g\n-            imgEqual[i, j][2] = r\n-\n-    cv2.namedWindow(\"Histogram_Equalization\", cv2.WINDOW_AUTOSIZE)\n-    cv2.imshow(\"Histogram_Equalization\", imgEqual)\n-\n-image = resizeImage()\n-\n-cv2.namedWindow(\"Original\", cv2.WINDOW_AUTOSIZE)\n-cv2.imshow(\"Original\", image)\n-\n-histogram_equalisation()\n-\n-cv2.waitKey(0)\n-cv2.destroyAllWindows()\n # TP6: Write the missing code that can calculate the histogram equalized (color) image.\n \n from math import floor\n import cv2\n import numpy as np\n-img = cv2.imread('images/fruit3.jpg')\n+img = cv2.imread('images/glass.jpg')\n copy_img=np.array(img)\n height,width,kernel=copy_img.shape\n histoB=(256)*[0]\n histoG=(256)*[0]\n@@ -129,51 +46,4 @@\n \n cv2.imshow('Histogram',copy_img)\n cv2.imshow(\"Original\",img)\n cv2.waitKey()\n-from math import floor\n-import cv2\n-import numpy as np\n-img = cv2.imread('images/fruit3.jpg')\n-copy_img=np.array(img)\n-height,width,kernel=copy_img.shape\n-histoB=(256)*[0]\n-histoG=(256)*[0]\n-histoR=(256)*[0]\n-LUTB=(256)*[0]\n-LUTG=(256)*[0]\n-LUTR=(256)*[0]\n-for i in range(height):\n-    for j in range(width):\n-        r,g,b = img[i,j]\n-        histoR[r]+=1\n-        histoG[g]+=1\n-        histoB[b]+=1\n-#build histogram original\n-for i in range(256):\n-    #change if i ==0 so we give histogram equal to its index at 0\n-    \n-    if i ==0:\n-        histoB[i]=histoB[0]\n-        histoG[i]=histoB[0]\n-        histoR[i]=histoR[0]\n-    else:\n-        #check the rest calculate like take current index + index-1\n-        histoB[i]=histoB[i]+histoB[i-1]\n-        histoG[i]=histoG[i]+histoG[i-1]\n-        histoR[i]=histoR[i]+histoR[i-1]\n-#transform histogram\n-for i in range(256):\n-    LUTB[i] = (float(histoB[i])/float(width*height))*255\n-    LUTG[i] = (float(histoG[i])/float(width*height))*255\n-    LUTR[i] = (float(histoR[i])/float(width*height))*255\n-for i in range(height):\n-    for j in range(width):\n-        # Write your code here\n-          r,g,b = img[i,j]\n-          copy_img[i,j,0]= LUTB[b]\n-          copy_img[i,j,2]= LUTB[r]\n-          copy_img[i,j,1]= LUTB[g]\n-\n-cv2.imshow('Histogram',copy_img)\n-cv2.imshow(\"Original\",img)\n-cv2.waitKey()\n"
                },
                {
                    "date": 1706062692448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+# TP6: Write the missing code that can calculate the histogram equalized (color) image.\n+\n+from math import floor\n+import cv2\n+import numpy as np\n+img = cv2.imread('images/glass.jpg')\n+copy_img=np.array(img)\n+height,width,kernel=copy_img.shape\n+histoB=(256)*[0]\n+histoG=(256)*[0]\n+histoR=(256)*[0]\n+LUTB=(256)*[0]\n+LUTG=(256)*[0]\n+LUTR=(256)*[0]\n+for i in range(height):\n+    for j in range(width):\n+        r,g,b = img[i,j]\n+        histoR[r]+=1\n+        histoG[g]+=1\n+        histoB[b]+=1\n+#build histogram original\n+for i in range(256):\n+    #change if i ==0 so we give histogram equal to its index at 0\n+    \n+    if i ==0:\n+        histoB[i]=histoB[0]\n+        histoG[i]=histoB[0]\n+        histoR[i]=histoR[0]\n+    else:\n+        #check the rest calculate like take current index + index-1\n+        histoB[i]=histoB[i]+histoB[i-1]\n+        histoG[i]=histoG[i]+histoG[i-1]\n+        histoR[i]=histoR[i]+histoR[i-1]\n+#transform histogram\n+for i in range(256):\n+    LUTB[i] = (float(histoB[i])/float(width*height))*255\n+    LUTG[i] = (float(histoG[i])/float(width*height))*255\n+    LUTR[i] = (float(histoR[i])/float(width*height))*255\n+for i in range(height):\n+    for j in range(width):\n+        # Write your code here\n+          r,g,b = img[i,j]\n+          copy_img[i,j,0]= LUTB[b]\n+          copy_img[i,j,2]= LUTB[r]\n+          copy_img[i,j,1]= LUTB[g]\n+\n+cv2.imshow(\"Original Image\",img)\n+cv2.imshow('Histogram Equalization Image',copy_img)\n+cv2.waitKey()\n"
                },
                {
                    "date": 1706104613853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+# TP6: Write the missing code that can calculate the histogram equalized (color) image.\n+\n+from math import floor\n+import cv2\n+import numpy as np\n+img = cv2.imread('images/glass.jpg')\n+copy_img=np.array(img)\n+height,width,kernel=copy_img.shape\n+histoB=(256)*[0]\n+histoG=(256)*[0]\n+histoR=(256)*[0]\n+LUTB=(256)*[0]\n+LUTG=(256)*[0]\n+LUTR=(256)*[0]\n+for i in range(height):\n+    for j in range(width):\n+        r,g,b = img[i,j]\n+        histoR[r]+=1\n+        histoG[g]+=1\n+        histoB[b]+=1\n+#build histogram original\n+for i in range(256):\n+    #change if i ==0 so we give histogram equal to its index at 0\n+    \n+    if i ==0:\n+        histoB[i]=histoB[0]\n+        histoG[i]=histoB[0]\n+        histoR[i]=histoR[0]\n+    else:\n+        #check the rest calculate like take current index + index-1\n+        histoB[i]=histoB[i]+histoB[i-1]\n+        histoG[i]=histoG[i]+histoG[i-1]\n+        histoR[i]=histoR[i]+histoR[i-1]\n+#transform histogram\n+for i in range(256):\n+    LUTB[i] = (float(histoB[i])/float(width*height))*255\n+    LUTG[i] = (float(histoG[i])/float(width*height))*255\n+    LUTR[i] = (float(histoR[i])/float(width*height))*255\n+for i in range(height):\n+    for j in range(width):\n+        # Write your code here\n+          b,g,r = img[i,j]\n+          copy_img[i,j,0]= LUTB[b]\n+          copy_img[i,j,1]= LUTB[r]\n+          copy_img[i,j,2]= LUTB[g]\n+\n+cv2.imshow(\"Original Image\",img)\n+cv2.imshow('Histogram Equalization Image',copy_img)\n+cv2.waitKey()\n"
                },
                {
                    "date": 1706142586170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+# TP6: Write the missing code that can calculate the histogram equalized (color) image.\n+\n+from math import floor\n+import cv2\n+import numpy as np\n+img = cv2.imread('images/glass.jpg')\n+copy_img=np.array(img)\n+height,width,kernel=copy_img.shape\n+# Histogram initialization\n+histoB=(256)*[0]\n+histoG=(256)*[0]\n+histoR=(256)*[0]\n+LUTB=(256)*[0]\n+LUTG=(256)*[0]\n+LUTR=(256)*[0]\n+# Building histogram\n+for i in range(height):\n+    for j in range(width):\n+        r,g,b = img[i,j]\n+        histoR[r]+=1\n+        histoG[g]+=1\n+        histoB[b]+=1\n+#build histogram original\n+for i in range(256):\n+    #change if i ==0 so we give histogram equal to its index at 0\n+    \n+    if i ==0:\n+        histoB[i]=histoB[0]\n+        histoG[i]=histoB[0]\n+        histoR[i]=histoR[0]\n+    else:\n+        #check the rest calculate like take current index + index-1\n+        histoB[i]=histoB[i]+histoB[i-1]\n+        histoG[i]=histoG[i]+histoG[i-1]\n+        histoR[i]=histoR[i]+histoR[i-1]\n+#transform histogram\n+for i in range(256):\n+    LUTB[i] = (float(histoB[i])/float(width*height))*255\n+    LUTG[i] = (float(histoG[i])/float(width*height))*255\n+    LUTR[i] = (float(histoR[i])/float(width*height))*255\n+for i in range(height):\n+    for j in range(width):\n+        # Write your code here\n+          b,g,r = img[i,j]\n+          copy_img[i,j,0]= LUTB[b]\n+          copy_img[i,j,1]= LUTB[r]\n+          copy_img[i,j,2]= LUTB[g]\n+\n+# Display the images\n+cv2.imshow(\"Original Image\",img)\n+cv2.imshow('Histogram Equalization Image',copy_img)\n+cv2.waitKey()\n"
                },
                {
                    "date": 1706143033261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,10 @@\n for i in range(256):\n     LUTB[i] = (float(histoB[i])/float(width*height))*255\n     LUTG[i] = (float(histoG[i])/float(width*height))*255\n     LUTR[i] = (float(histoR[i])/float(width*height))*255\n+\n+# Apply histogram equalization\n for i in range(height):\n     for j in range(width):\n         # Write your code here\n           b,g,r = img[i,j]\n@@ -49,151 +51,4 @@\n # Display the images\n cv2.imshow(\"Original Image\",img)\n cv2.imshow('Histogram Equalization Image',copy_img)\n cv2.waitKey()\n-# TP6: Write the missing code that can calculate the histogram equalized (color) image.\n-\n-from math import floor\n-import cv2\n-import numpy as np\n-img = cv2.imread('images/glass.jpg')\n-copy_img=np.array(img)\n-height,width,kernel=copy_img.shape\n-histoB=(256)*[0]\n-histoG=(256)*[0]\n-histoR=(256)*[0]\n-LUTB=(256)*[0]\n-LUTG=(256)*[0]\n-LUTR=(256)*[0]\n-for i in range(height):\n-    for j in range(width):\n-        r,g,b = img[i,j]\n-        histoR[r]+=1\n-        histoG[g]+=1\n-        histoB[b]+=1\n-#build histogram original\n-for i in range(256):\n-    #change if i ==0 so we give histogram equal to its index at 0\n-    \n-    if i ==0:\n-        histoB[i]=histoB[0]\n-        histoG[i]=histoB[0]\n-        histoR[i]=histoR[0]\n-    else:\n-        #check the rest calculate like take current index + index-1\n-        histoB[i]=histoB[i]+histoB[i-1]\n-        histoG[i]=histoG[i]+histoG[i-1]\n-        histoR[i]=histoR[i]+histoR[i-1]\n-#transform histogram\n-for i in range(256):\n-    LUTB[i] = (float(histoB[i])/float(width*height))*255\n-    LUTG[i] = (float(histoG[i])/float(width*height))*255\n-    LUTR[i] = (float(histoR[i])/float(width*height))*255\n-for i in range(height):\n-    for j in range(width):\n-        # Write your code here\n-          b,g,r = img[i,j]\n-          copy_img[i,j,0]= LUTB[b]\n-          copy_img[i,j,1]= LUTB[r]\n-          copy_img[i,j,2]= LUTB[g]\n-\n-cv2.imshow(\"Original Image\",img)\n-cv2.imshow('Histogram Equalization Image',copy_img)\n-cv2.waitKey()\n-# TP6: Write the missing code that can calculate the histogram equalized (color) image.\n-\n-from math import floor\n-import cv2\n-import numpy as np\n-img = cv2.imread('images/glass.jpg')\n-copy_img=np.array(img)\n-height,width,kernel=copy_img.shape\n-histoB=(256)*[0]\n-histoG=(256)*[0]\n-histoR=(256)*[0]\n-LUTB=(256)*[0]\n-LUTG=(256)*[0]\n-LUTR=(256)*[0]\n-for i in range(height):\n-    for j in range(width):\n-        r,g,b = img[i,j]\n-        histoR[r]+=1\n-        histoG[g]+=1\n-        histoB[b]+=1\n-#build histogram original\n-for i in range(256):\n-    #change if i ==0 so we give histogram equal to its index at 0\n-    \n-    if i ==0:\n-        histoB[i]=histoB[0]\n-        histoG[i]=histoB[0]\n-        histoR[i]=histoR[0]\n-    else:\n-        #check the rest calculate like take current index + index-1\n-        histoB[i]=histoB[i]+histoB[i-1]\n-        histoG[i]=histoG[i]+histoG[i-1]\n-        histoR[i]=histoR[i]+histoR[i-1]\n-#transform histogram\n-for i in range(256):\n-    LUTB[i] = (float(histoB[i])/float(width*height))*255\n-    LUTG[i] = (float(histoG[i])/float(width*height))*255\n-    LUTR[i] = (float(histoR[i])/float(width*height))*255\n-for i in range(height):\n-    for j in range(width):\n-        # Write your code here\n-          r,g,b = img[i,j]\n-          copy_img[i,j,0]= LUTB[b]\n-          copy_img[i,j,2]= LUTB[r]\n-          copy_img[i,j,1]= LUTB[g]\n-\n-cv2.imshow(\"Original Image\",img)\n-cv2.imshow('Histogram Equalization Image',copy_img)\n-cv2.waitKey()\n-# TP6: Write the missing code that can calculate the histogram equalized (color) image.\n-\n-from math import floor\n-import cv2\n-import numpy as np\n-img = cv2.imread('images/glass.jpg')\n-copy_img=np.array(img)\n-height,width,kernel=copy_img.shape\n-histoB=(256)*[0]\n-histoG=(256)*[0]\n-histoR=(256)*[0]\n-LUTB=(256)*[0]\n-LUTG=(256)*[0]\n-LUTR=(256)*[0]\n-for i in range(height):\n-    for j in range(width):\n-        r,g,b = img[i,j]\n-        histoR[r]+=1\n-        histoG[g]+=1\n-        histoB[b]+=1\n-#build histogram original\n-for i in range(256):\n-    #change if i ==0 so we give histogram equal to its index at 0\n-    \n-    if i ==0:\n-        histoB[i]=histoB[0]\n-        histoG[i]=histoB[0]\n-        histoR[i]=histoR[0]\n-    else:\n-        #check the rest calculate like take current index + index-1\n-        histoB[i]=histoB[i]+histoB[i-1]\n-        histoG[i]=histoG[i]+histoG[i-1]\n-        histoR[i]=histoR[i]+histoR[i-1]\n-#transform histogram\n-for i in range(256):\n-    LUTB[i] = (float(histoB[i])/float(width*height))*255\n-    LUTG[i] = (float(histoG[i])/float(width*height))*255\n-    LUTR[i] = (float(histoR[i])/float(width*height))*255\n-for i in range(height):\n-    for j in range(width):\n-        # Write your code here\n-          r,g,b = img[i,j]\n-          copy_img[i,j,0]= LUTB[b]\n-          copy_img[i,j,2]= LUTB[r]\n-          copy_img[i,j,1]= LUTB[g]\n-\n-cv2.imshow('Histogram',copy_img)\n-cv2.imshow(\"Original\",img)\n-cv2.waitKey()\n"
                },
                {
                    "date": 1706143207827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+# TP6: Write the missing code that can calculate the histogram equalized (color) image.\n+\n+from math import floor\n+import cv2\n+import numpy as np\n+img = cv2.imread('images/glass.jpg')\n+copy_img=np.array(img)\n+height,width,kernel=copy_img.shape\n+# Histogram initialization\n+histoB=(256)*[0]\n+histoG=(256)*[0]\n+histoR=(256)*[0]\n+LUTB=(256)*[0]\n+LUTG=(256)*[0]\n+LUTR=(256)*[0]\n+# Building histogram\n+for i in range(height):\n+    for j in range(width):\n+        r,g,b = img[i,j]\n+        histoR[r]+=1\n+        histoG[g]+=1\n+        histoB[b]+=1\n+#build histogram original\n+for i in range(256):\n+    #change if i ==0 so we give histogram equal to its index at 0\n+    \n+    if i ==0:\n+        histoB[i]=histoB[0]\n+        histoG[i]=histoB[0]\n+        histoR[i]=histoR[0]\n+    else:\n+        #check the rest calculate like take current index + index-1\n+        histoB[i]=histoB[i]+histoB[i-1]\n+        histoG[i]=histoG[i]+histoG[i-1]\n+        histoR[i]=histoR[i]+histoR[i-1]\n+#transform histogram\n+for i in range(256):\n+    LUTB[i] = (float(histoB[i])/float(width*height))*255\n+    LUTG[i] = (float(histoG[i])/float(width*height))*255\n+    LUTR[i] = (float(histoR[i])/float(width*height))*255\n+\n+# Apply histogram equalization\n+for i in range(height):\n+    for j in range(width):\n+        # Write your code here\n+          b,g,r = img[i,j] # Get the current pixel's color values\n+          # Apply the equalized LUT values to each color channel\n+          copy_img[i,j,0]= LUTB[b] \n+          copy_img[i,j,1]= LUTB[r]\n+          copy_img[i,j,2]= LUTB[g]\n+\n+# Display the images\n+cv2.imshow(\"Original Image\",img)\n+cv2.imshow('Histogram Equalization Image',copy_img)\n+cv2.waitKey()\n"
                },
                {
                    "date": 1706143452189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+# TP6: Write the missing code that can calculate the histogram equalized (color) image.\n+\n+from math import floor\n+import cv2\n+import numpy as np\n+#read images\n+img = cv2.imread('images/glass.jpg')\n+copy_img=np.array(img)\n+height,width,kernel=copy_img.shape\n+# Histogram initialization\n+histoB=(256)*[0]\n+histoG=(256)*[0]\n+histoR=(256)*[0]\n+LUTB=(256)*[0]\n+LUTG=(256)*[0]\n+LUTR=(256)*[0]\n+# Building histogram\n+for i in range(height):\n+    for j in range(width):\n+        r,g,b = img[i,j]\n+        histoR[r]+=1\n+        histoG[g]+=1\n+        histoB[b]+=1\n+#build histogram original\n+for i in range(256):\n+    #change if i ==0 so we give histogram equal to its index at 0\n+    \n+    if i ==0:\n+        histoB[i]=histoB[0]\n+        histoG[i]=histoB[0]\n+        histoR[i]=histoR[0]\n+    else:\n+        #check the rest calculate like take current index + index-1\n+        histoB[i]=histoB[i]+histoB[i-1]\n+        histoG[i]=histoG[i]+histoG[i-1]\n+        histoR[i]=histoR[i]+histoR[i-1]\n+#transform histogram\n+for i in range(256):\n+    LUTB[i] = (float(histoB[i])/float(width*height))*255\n+    LUTG[i] = (float(histoG[i])/float(width*height))*255\n+    LUTR[i] = (float(histoR[i])/float(width*height))*255\n+\n+# Apply histogram equalization\n+for i in range(height):\n+    for j in range(width):\n+        # Write your code here\n+          b,g,r = img[i,j] # Get the current pixel's color values\n+          # Apply the equalized LUT values to each color channel\n+          copy_img[i,j,0]= LUTB[b] \n+          copy_img[i,j,1]= LUTB[r]\n+          copy_img[i,j,2]= LUTB[g]\n+\n+# Display the images\n+cv2.imshow(\"Original Image\",img)\n+cv2.imshow('Histogram Equalization Image',copy_img)\n+cv2.waitKey()\n"
                }
            ],
            "date": 1705546932388,
            "name": "Commit-0",
            "content": "\n"
        }
    ]
}