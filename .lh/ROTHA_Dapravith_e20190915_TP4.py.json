{
    "sourceFile": "ROTHA_Dapravith_e20190915_TP4.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1704294672630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704294694551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import cv2 as cv\n-readimg =  cv2.imread('img/fruit2.jpg')\n+readimg =  cv2.imread('./images/fruit2.jpg')\n maskSobelX= [[-1,0,1],\n              [-2,0,2],\n              [-1,0,1]]\n maskSobelY=[[1,2,1],\n             [0,0,0],\n             [-1,-2,-1]]\n \n #extract height and width\n-mOutImg=cv2.imread('img/fruit2.jpg')\n+mOutImg=cv2.imread('./images/fruit2.jpg')\n (height,width,kernel)=readimg.shape\n print(width,height,kernel)\n \n pTmpXB= (width*height)*[0]\n"
                },
                {
                    "date": 1704294715745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import cv2 as cv\n+import cv2\n readimg =  cv2.imread('./images/fruit2.jpg')\n maskSobelX= [[-1,0,1],\n              [-2,0,2],\n              [-1,0,1]]\n"
                },
                {
                    "date": 1704859389226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+import cv2\n+readimg =  cv2.imread('./images/fruit2.jpg')\n+maskSobelX= [[-1,0,1],\n+             [-2,0,2],\n+             [-1,0,1]]\n+maskSobelY=[[1,2,1],\n+            [0,0,0],\n+            [-1,-2,-1]]\n+\n+#extract height and width\n+mOutImg=cv2.imread('./images/fruit2.jpg')\n+(height,width,kernel)=readimg.shape\n+print(width,height,kernel)\n+\n+pTmpXB= (width*height)*[0]\n+pTmpXG= (width*height)*[0]\n+pTmpXR= (width*height)*[0]\n+pTmpYB=(width*height)*[0]\n+pTmpYG=(width*height)*[0]\n+pTmpYR= (width*height)*[0]\n+#initailize 0\n+mOutImg=mOutImg*0\n+#apply mask to original image\n+for i in range(1,height-1):\n+    for j in range(1,width-1):\n+        newValueBx=0\n+        newValueGx=0\n+        newValueRx=0\n+        newValueB=0\n+        newValueG =0\n+        newValueR=0\n+        for mr in range(3):\n+            for mc in range(3):\n+            # I1(i+k-1,j+l-1)k(k,l)\n+                r,g,b=readimg[i+mc-1,j+mr-1]\n+                newValueBx += maskSobelX[mr][mc]*b\n+                newValueGx += maskSobelX[mr][mc]*g\n+                newValueRx += maskSobelX[mr][mc]*r\n+                newValueB += maskSobelY[mr][mc]*b\n+                newValueG += maskSobelY[mr][mc]*g\n+                newValueR += maskSobelY[mr][mc]*r\n+        pTmpYB[i*width+j]= newValueB\n+        pTmpYG[i*width+j]= newValueG\n+        pTmpYR[i*width+j]= newValueR\n+        pTmpXB[i *width +j]= newValueBx\n+        pTmpXG[i * width +j]=newValueGx\n+        pTmpXR[i * width +j]= newValueRx\n+#convert to positive\n+for i in range(1,height-1):\n+    for j in range(1,width-1):\n+        constBVal1,constGVal1,constRVal1=pTmpXB[i*width+j],pTmpXG[i*width+j],pTmpXR[i*width+j]\n+        constBVal2,constGVal2,constRVal2=pTmpYB[i*width+j],pTmpYG[i*width+j],pTmpYR[i*width+j]\n+        if constBVal1<0:\n+            constBVal1=-constBVal1\n+        if constGVal1<0:\n+            constGVal1=-constGVal1\n+        if constRVal1<0:\n+            constRVal1=-constRVal1\n+        if constBVal2<0:\n+            constBVal2=-constBVal2\n+        if constGVal2<0:\n+            constGVal2=-constGVal2\n+        if constRVal2<0:\n+            constRVal2=-constRVal2\n+        pTmpXB[i*width+j]=constBVal1+constBVal2\n+        pTmpXG[i*width+j]=constGVal1+constGVal2\n+        pTmpXR[i*width+j]=constRVal1+constRVal2\n+#new max and min of picture\n+minB=minG=minR=100000000\n+maxB=maxG=maxR=-100000000\n+for i in range(1,height-1):\n+    for j in range(1,width-1):\n+        newValueB=pTmpXB[i*width+j]\n+        newValueG=pTmpXG[i*width+j]\n+        newValueR=pTmpXR[i*width+j]\n+        if(newValueB<minB):\n+            minB=newValueB\n+        if(newValueB>maxB):\n+            maxB=newValueB\n+        if(newValueG<minG):\n+            minG=newValueG\n+        if(newValueG>maxG): \n+            maxG=newValueG\n+        if(newValueR<minR):\n+            minR = newValueR\n+        if(newValueR>maxR):\n+            maxR=newValueR\n+#optimize number \n+constBVal1 = (float(255.0/(maxB-minB)))\n+constBVal2= (float(-255.0*minB/(maxB-minB)))\n+constGVal1=(float(255.0/(maxG-minG)))\n+constGVal2 = (float(-255.0*minG/(maxG-minG)))\n+constRVal1=(float(255.0/(maxR-minR)))\n+constRVal2=(float(-255.0 * minR/(maxR-minR)))\n+# apply new RGB\n+for i in range(1,height-1):\n+    for j in range(1,width-1):\n+        # Write your code here\n+        #newB = pTmpXB[i * width +j] * (constBVal1-constBVal2) + constBVal2\n+        #newG = pTmpXG[i * width +j] * (constGVal1-constGVal2) + constGVal2\n+        #newR = pTmpXR[i * width +j] * (constRVal1-constRVal2) + constRVal2\n+        #mOutImg[i, j] = [newB, newG, newR]\n+        newB = pmTmpXB[i *width + j] * (constBVal1-constBVal2) + constBVal2\n+        newG = pmTmpXG[i * width + j] * (constGVal1-constGVal2) + constGVal2\n+        newR = pmTmpXR[I * width + j] * (constRVal1-constRVal2) + constRVal2\n+        mOutImg[i, j] = [newB, newG, newR]\n+\n+pTmpXB=[]\n+pTmpXG=[]\n+pTmpXR=[]\n+pTmpYB=[]\n+pTmpYG=[]\n+pTmpYR=[]\n+# print(mOutImg)\n+cv2.imshow(\"Sobel Edge Detection\",mOutImg)\n+cv2.imshow(\"Origin\",readimg)\n+cv2.waitKey()\n"
                },
                {
                    "date": 1704859449838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,11 +99,11 @@\n         #newB = pTmpXB[i * width +j] * (constBVal1-constBVal2) + constBVal2\n         #newG = pTmpXG[i * width +j] * (constGVal1-constGVal2) + constGVal2\n         #newR = pTmpXR[i * width +j] * (constRVal1-constRVal2) + constRVal2\n         #mOutImg[i, j] = [newB, newG, newR]\n-        newB = pmTmpXB[i *width + j] * (constBVal1-constBVal2) + constBVal2\n-        newG = pmTmpXG[i * width + j] * (constGVal1-constGVal2) + constGVal2\n-        newR = pmTmpXR[I * width + j] * (constRVal1-constRVal2) + constRVal2\n+        newB = pTmpXB[i *width + j] * (constBVal1-constBVal2) + constBVal2\n+        newG = pTmpXG[i * width + j] * (constGVal1-constGVal2) + constGVal2\n+        newR = pTmpXR[I * width + j] * (constRVal1-constRVal2) + constRVal2\n         mOutImg[i, j] = [newB, newG, newR]\n \n pTmpXB=[]\n pTmpXG=[]\n@@ -114,117 +114,4 @@\n # print(mOutImg)\n cv2.imshow(\"Sobel Edge Detection\",mOutImg)\n cv2.imshow(\"Origin\",readimg)\n cv2.waitKey()\n-import cv2\n-readimg =  cv2.imread('./images/fruit2.jpg')\n-maskSobelX= [[-1,0,1],\n-             [-2,0,2],\n-             [-1,0,1]]\n-maskSobelY=[[1,2,1],\n-            [0,0,0],\n-            [-1,-2,-1]]\n-\n-#extract height and width\n-mOutImg=cv2.imread('./images/fruit2.jpg')\n-(height,width,kernel)=readimg.shape\n-print(width,height,kernel)\n-\n-pTmpXB= (width*height)*[0]\n-pTmpXG= (width*height)*[0]\n-pTmpXR= (width*height)*[0]\n-pTmpYB=(width*height)*[0]\n-pTmpYG=(width*height)*[0]\n-pTmpYR= (width*height)*[0]\n-#initailize 0\n-mOutImg=mOutImg*0\n-#apply mask to original image\n-for i in range(1,height-1):\n-    for j in range(1,width-1):\n-        newValueBx=0\n-        newValueGx=0\n-        newValueRx=0\n-        newValueB=0\n-        newValueG =0\n-        newValueR=0\n-        for mr in range(3):\n-            for mc in range(3):\n-            # I1(i+k-1,j+l-1)k(k,l)\n-                r,g,b=readimg[i+mc-1,j+mr-1]\n-                newValueBx += maskSobelX[mr][mc]*b\n-                newValueGx += maskSobelX[mr][mc]*g\n-                newValueRx += maskSobelX[mr][mc]*r\n-                newValueB += maskSobelY[mr][mc]*b\n-                newValueG += maskSobelY[mr][mc]*g\n-                newValueR += maskSobelY[mr][mc]*r\n-        pTmpYB[i*width+j]= newValueB\n-        pTmpYG[i*width+j]= newValueG\n-        pTmpYR[i*width+j]= newValueR\n-        pTmpXB[i *width +j]= newValueBx\n-        pTmpXG[i * width +j]=newValueGx\n-        pTmpXR[i * width +j]= newValueRx\n-#convert to positive\n-for i in range(1,height-1):\n-    for j in range(1,width-1):\n-        constBVal1,constGVal1,constRVal1=pTmpXB[i*width+j],pTmpXG[i*width+j],pTmpXR[i*width+j]\n-        constBVal2,constGVal2,constRVal2=pTmpYB[i*width+j],pTmpYG[i*width+j],pTmpYR[i*width+j]\n-        if constBVal1<0:\n-            constBVal1=-constBVal1\n-        if constGVal1<0:\n-            constGVal1=-constGVal1\n-        if constRVal1<0:\n-            constRVal1=-constRVal1\n-        if constBVal2<0:\n-            constBVal2=-constBVal2\n-        if constGVal2<0:\n-            constGVal2=-constGVal2\n-        if constRVal2<0:\n-            constRVal2=-constRVal2\n-        pTmpXB[i*width+j]=constBVal1+constBVal2\n-        pTmpXG[i*width+j]=constGVal1+constGVal2\n-        pTmpXR[i*width+j]=constRVal1+constRVal2\n-#new max and min of picture\n-minB=minG=minR=100000000\n-maxB=maxG=maxR=-100000000\n-for i in range(1,height-1):\n-    for j in range(1,width-1):\n-        newValueB=pTmpXB[i*width+j]\n-        newValueG=pTmpXG[i*width+j]\n-        newValueR=pTmpXR[i*width+j]\n-        if(newValueB<minB):\n-            minB=newValueB\n-        if(newValueB>maxB):\n-            maxB=newValueB\n-        if(newValueG<minG):\n-            minG=newValueG\n-        if(newValueG>maxG): \n-            maxG=newValueG\n-        if(newValueR<minR):\n-            minR = newValueR\n-        if(newValueR>maxR):\n-            maxR=newValueR\n-#optimize number \n-constBVal1 = (float(255.0/(maxB-minB)))\n-constBVal2= (float(-255.0*minB/(maxB-minB)))\n-constGVal1=(float(255.0/(maxG-minG)))\n-constGVal2 = (float(-255.0*minG/(maxG-minG)))\n-constRVal1=(float(255.0/(maxR-minR)))\n-constRVal2=(float(-255.0 * minR/(maxR-minR)))\n-# apply new RGB\n-for i in range(1,height-1):\n-    for j in range(1,width-1):\n-        # Write your code here\n-        newB = pTmpXB[i * width +j] * (constBVal1-constBVal2) + constBVal2\n-        newG = pTmpXG[i * width +j] * (constGVal1-constGVal2) + constGVal2\n-        newR = pTmpXR[i * width +j] * (constRVal1-constRVal2) + constRVal2\n-        mOutImg[i, j] = [newB, newG, newR]\n-\n-pTmpXB=[]\n-pTmpXG=[]\n-pTmpXR=[]\n-pTmpYB=[]\n-pTmpYG=[]\n-pTmpYR=[]\n-# print(mOutImg)\n-cv2.imshow(\"Sobel Edge Detection\",mOutImg)\n-cv2.imshow(\"Origin\",readimg)\n-cv2.waitKey()\n"
                },
                {
                    "date": 1704859464966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n         #newR = pTmpXR[i * width +j] * (constRVal1-constRVal2) + constRVal2\n         #mOutImg[i, j] = [newB, newG, newR]\n         newB = pTmpXB[i *width + j] * (constBVal1-constBVal2) + constBVal2\n         newG = pTmpXG[i * width + j] * (constGVal1-constGVal2) + constGVal2\n-        newR = pTmpXR[I * width + j] * (constRVal1-constRVal2) + constRVal2\n+        newR = pTmpXR[i * width + j] * (constRVal1-constRVal2) + constRVal2\n         mOutImg[i, j] = [newB, newG, newR]\n \n pTmpXB=[]\n pTmpXG=[]\n"
                },
                {
                    "date": 1705537555911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,12 +95,8 @@\n # apply new RGB\n for i in range(1,height-1):\n     for j in range(1,width-1):\n         # Write your code here\n-        #newB = pTmpXB[i * width +j] * (constBVal1-constBVal2) + constBVal2\n-        #newG = pTmpXG[i * width +j] * (constGVal1-constGVal2) + constGVal2\n-        #newR = pTmpXR[i * width +j] * (constRVal1-constRVal2) + constRVal2\n-        #mOutImg[i, j] = [newB, newG, newR]\n         newB = pTmpXB[i *width + j] * (constBVal1-constBVal2) + constBVal2\n         newG = pTmpXG[i * width + j] * (constGVal1-constGVal2) + constGVal2\n         newR = pTmpXR[i * width + j] * (constRVal1-constRVal2) + constRVal2\n         mOutImg[i, j] = [newB, newG, newR]\n"
                }
            ],
            "date": 1704294672630,
            "name": "Commit-0",
            "content": "import cv2 as cv\nreadimg =  cv2.imread('img/fruit2.jpg')\nmaskSobelX= [[-1,0,1],\n             [-2,0,2],\n             [-1,0,1]]\nmaskSobelY=[[1,2,1],\n            [0,0,0],\n            [-1,-2,-1]]\n\n#extract height and width\nmOutImg=cv2.imread('img/fruit2.jpg')\n(height,width,kernel)=readimg.shape\nprint(width,height,kernel)\n\npTmpXB= (width*height)*[0]\npTmpXG= (width*height)*[0]\npTmpXR= (width*height)*[0]\npTmpYB=(width*height)*[0]\npTmpYG=(width*height)*[0]\npTmpYR= (width*height)*[0]\n#initailize 0\nmOutImg=mOutImg*0\n#apply mask to original image\nfor i in range(1,height-1):\n    for j in range(1,width-1):\n        newValueBx=0\n        newValueGx=0\n        newValueRx=0\n        newValueB=0\n        newValueG =0\n        newValueR=0\n        for mr in range(3):\n            for mc in range(3):\n            # I1(i+k-1,j+l-1)k(k,l)\n                r,g,b=readimg[i+mc-1,j+mr-1]\n                newValueBx += maskSobelX[mr][mc]*b\n                newValueGx += maskSobelX[mr][mc]*g\n                newValueRx += maskSobelX[mr][mc]*r\n                newValueB += maskSobelY[mr][mc]*b\n                newValueG += maskSobelY[mr][mc]*g\n                newValueR += maskSobelY[mr][mc]*r\n        pTmpYB[i*width+j]= newValueB\n        pTmpYG[i*width+j]= newValueG\n        pTmpYR[i*width+j]= newValueR\n        pTmpXB[i *width +j]= newValueBx\n        pTmpXG[i * width +j]=newValueGx\n        pTmpXR[i * width +j]= newValueRx\n#convert to positive\nfor i in range(1,height-1):\n    for j in range(1,width-1):\n        constBVal1,constGVal1,constRVal1=pTmpXB[i*width+j],pTmpXG[i*width+j],pTmpXR[i*width+j]\n        constBVal2,constGVal2,constRVal2=pTmpYB[i*width+j],pTmpYG[i*width+j],pTmpYR[i*width+j]\n        if constBVal1<0:\n            constBVal1=-constBVal1\n        if constGVal1<0:\n            constGVal1=-constGVal1\n        if constRVal1<0:\n            constRVal1=-constRVal1\n        if constBVal2<0:\n            constBVal2=-constBVal2\n        if constGVal2<0:\n            constGVal2=-constGVal2\n        if constRVal2<0:\n            constRVal2=-constRVal2\n        pTmpXB[i*width+j]=constBVal1+constBVal2\n        pTmpXG[i*width+j]=constGVal1+constGVal2\n        pTmpXR[i*width+j]=constRVal1+constRVal2\n#new max and min of picture\nminB=minG=minR=100000000\nmaxB=maxG=maxR=-100000000\nfor i in range(1,height-1):\n    for j in range(1,width-1):\n        newValueB=pTmpXB[i*width+j]\n        newValueG=pTmpXG[i*width+j]\n        newValueR=pTmpXR[i*width+j]\n        if(newValueB<minB):\n            minB=newValueB\n        if(newValueB>maxB):\n            maxB=newValueB\n        if(newValueG<minG):\n            minG=newValueG\n        if(newValueG>maxG): \n            maxG=newValueG\n        if(newValueR<minR):\n            minR = newValueR\n        if(newValueR>maxR):\n            maxR=newValueR\n#optimize number \nconstBVal1 = (float(255.0/(maxB-minB)))\nconstBVal2= (float(-255.0*minB/(maxB-minB)))\nconstGVal1=(float(255.0/(maxG-minG)))\nconstGVal2 = (float(-255.0*minG/(maxG-minG)))\nconstRVal1=(float(255.0/(maxR-minR)))\nconstRVal2=(float(-255.0 * minR/(maxR-minR)))\n# apply new RGB\nfor i in range(1,height-1):\n    for j in range(1,width-1):\n        # Write your code here\n        newB = pTmpXB[i * width +j] * (constBVal1-constBVal2) + constBVal2\n        newG = pTmpXG[i * width +j] * (constGVal1-constGVal2) + constGVal2\n        newR = pTmpXR[i * width +j] * (constRVal1-constRVal2) + constRVal2\n        mOutImg[i, j] = [newB, newG, newR]\n\npTmpXB=[]\npTmpXG=[]\npTmpXR=[]\npTmpYB=[]\npTmpYG=[]\npTmpYR=[]\n# print(mOutImg)\ncv2.imshow(\"Sobel Edge Detection\",mOutImg)\ncv2.imshow(\"Origin\",readimg)\ncv2.waitKey()\n"
        }
    ]
}