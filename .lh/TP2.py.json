{
    "sourceFile": "TP2.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1702542968258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702543169528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import cv2 as cv\n+\n+image = cv.imread('./images/Pic1.jpg')\n+\n+height, width = image.shape[:2]\n+\n+for h in range(height):\n+    for w in range(width):\n+        B = 255 - image[h,w, 0]\n+        G = 255 - image[h,w, 1]\n+        R = 255 - image[h,w, 2]\n+        \n+        image[h,w, 0] = B\n+        image[h,w, 1] = G\n+        image[h,w, 2] = R\n+\n+cv.imshow('Inversion', image)\n+cv.waitKey(0)\n+cv.destroyAllWindows()\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1702543280122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,20 @@\n+import cv2 as cv\n+\n+image = cv.imread('./images/Pic1.jpg')\n+\n+height, width = image.shape[:2]\n+\n+for h in range(height):\n+    for w in range(width):\n+        B = 255 - image[h,w, 0]\n+        G = 255 - image[h,w, 1]\n+        R = 255 - image[h,w, 2]\n+        \n+        image[h,w, 0] = B\n+        image[h,w, 1] = G\n+        image[h,w, 2] = R\n+\n+cv.imshow('Inversion Image', image)\n+cv.waitKey(0)\n+cv.destroyAllWindows()\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1702543483192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,19 @@\n+import cv2 as cv\n+\n+image = cv.imread('./images/Pic1.jpg')\n+\n+height, width = image.shape[:2]\n+\n+for h in range(height):\n+    for w in range(width):\n+        B = 255 - image[h,w, 0]\n+        G = 255 - image[h,w, 1]\n+        R = 255 - image[h,w, 2]\n+        \n+        image[h,w, 0] = B\n+        image[h,w, 1] = G\n+        image[h,w, 2] = R\n+\n+cv.imshow('Inversion Image', image)\n+cv.waitKey(0)\n+cv.destroyAllWindows()\n"
                },
                {
                    "date": 1702543746972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,19 @@\n import cv2 as cv\n \n-image = cv.imread('./images/Pic1.jpg')\n+imageFile = cv.imread('./images/Pic1.jpg')\n \n-height, width = image.shape[:2]\n+height = imageFile.shape[0]\n+width = imageFile.shape[1]\n \n for h in range(height):\n     for w in range(width):\n-        B = 255 - image[h,w, 0]\n-        G = 255 - image[h,w, 1]\n-        R = 255 - image[h,w, 2]\n+        B = 255 - imageFile[h,w, 0]\n+        G = 255 - imageFile[h,w, 1]\n+        R = 255 - imageFile[h,w, 2]\n         \n-        image[h,w, 0] = B\n-        image[h,w, 1] = G\n-        image[h,w, 2] = R\n-\n-cv.imshow('Inversion Image', image)\n+        imageFile[h,w, 0] = B\n+        imageFile[h,w, 1] = G\n+        imageFile[h,w, 2] = R\n+cv.imshow('Image Inversion from BGR', imageFile)\n cv.waitKey(0)\n-cv.destroyAllWindows()\n-import cv2 as cv\n-\n-image = cv.imread('./images/Pic1.jpg')\n-\n-height, width = image.shape[:2]\n-\n-for h in range(height):\n-    for w in range(width):\n-        B = 255 - image[h,w, 0]\n-        G = 255 - image[h,w, 1]\n-        R = 255 - image[h,w, 2]\n-        \n-        image[h,w, 0] = B\n-        image[h,w, 1] = G\n-        image[h,w, 2] = R\n-\n-cv.imshow('Inversion Image', image)\n-cv.waitKey(0)\n-cv.destroyAllWindows()\n-    \n-import cv2 as cv\n-\n-image = cv.imread('./images/Pic1.jpg')\n-\n-height, width = image.shape[:2]\n-\n-for h in range(height):\n-    for w in range(width):\n-        B = 255 - image[h,w, 0]\n-        G = 255 - image[h,w, 1]\n-        R = 255 - image[h,w, 2]\n-        \n-        image[h,w, 0] = B\n-        image[h,w, 1] = G\n-        image[h,w, 2] = R\n-\n-cv.imshow('Inversion', image)\n-cv.waitKey(0)\n-cv.destroyAllWindows()\n-    \n-import cv2 as cv\n-\n-image = cv.imread('./images/Pic1.jpg')\n-\n-height, width = image.shape[:2]\n-\n-for h in range(height):\n-    for w in range(width):\n-        B = 255 - image[h,w, 0]\n-        G = 255 - image[h,w, 1]\n\\ No newline at end of file\n-        R = 255 - image[h,w, 2]\n-        \n-        image[h,w, 0] = B\n-        image[h,w, 1] = G\n-        image[h,w, 2] = R\n-\n-cv.imshow('Test', image)\n-cv.waitKey(0)\n-cv.destroyAllWindows()\n-    \n+cv.destroyAllWindows()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1702552478963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import cv2 as cv\n \n-imageFile = cv.imread('./images/Pic1.jpg')\n+imageFile = cv.imread('./images/fruit4.jpg')\n \n height = imageFile.shape[0]\n width = imageFile.shape[1]\n \n"
                },
                {
                    "date": 1702552557225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,7 +13,9 @@\n         \n         imageFile[h,w, 0] = B\n         imageFile[h,w, 1] = G\n         imageFile[h,w, 2] = R\n+\n+cv.imshow('Orignal Image', imageFile)        \n cv.imshow('Image Inversion from BGR', imageFile)\n cv.waitKey(0)\n cv.destroyAllWindows()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1702552697595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,30 @@\n+import cv2 as cv\n+\n+def invert_image(image):\n+    height, width = image.shape[:2]\n+\n+    for h in range(height):\n+        for w in range(width):\n+            # Invert each color channel\n+            B = 255 - image[h, w, 0]\n+            G = 255 - image[h, w, 1]\n+            R = 255 - image[h, w, 2]\n+\n+            # Update the pixel values in the image\n+            image[h, w, 0] = B\n+            image[h, w, 1] = G\n+            image[h, w, 2] = R\n+\n+    return image\n+\n+# Load an image\n+imageFile = cv.imread('./images/fruit4.jpg')\n+\n+# Call the function to invert the image\n+inverted_image = invert_image(imageFile)\n+\n+# Display the original and inverted images\n+cv.imshow('Original Image', imageFile)\n+cv.imshow('Inverted Image', inverted_image)\n+cv.waitKey(0)\n+cv.destroyAllWindows()\n"
                },
                {
                    "date": 1702552762508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import cv2 as cv\n+\n+def invert_image(image):\n+    height, width = image.shape[:2]\n+\n+    for h in range(height):\n+        for w in range(width):\n+            # Invert each color channel\n+            B = 255 - image[h, w, 0]\n+            G = 255 - image[h, w, 1]\n+            R = 255 - image[h, w, 2]\n+\n+            # Update the pixel values in the image\n+            image[h, w, 0] = B\n+            image[h, w, 1] = G\n+            image[h, w, 2] = R\n+\n+    return image\n+\n+# Load an image from file\n+imageFile = cv.imread('./images/fruit4.jpg')\n+\n+if imageFile is None:\n+    print(\"Error: Could not read the image.\")\n+else:\n+    # Call the function to invert the image\n+    inverted_image = invert_image(imageFile)\n+\n+    # Display the original and inverted images\n+    cv.imshow('Original Image', imageFile)\n+    cv.imshow('Inverted Image', inverted_image)\n+    cv.waitKey(0)\n+    cv.destroyAllWindows()\n"
                },
                {
                    "date": 1702552848000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,17 +17,33 @@\n \n     return image\n \n # Load an image from file\n-imageFile = cv.imread('./images/fruit4.jpg')\n+original_image = cv.imread('./images/fruit4.jpg')\n \n-if imageFile is None:\n-    print(\"Error: Could not read the image.\")\n+if original_image is None:\n+    print(\"Error: Could not read the original image.\")\n else:\n+    # Display the original image\n+    cv.imshow('Original Image', original_image)\n+    cv.waitKey(0)\n+    cv.destroyAllWindows()\n+\n     # Call the function to invert the image\n-    inverted_image = invert_image(imageFile)\n+    inverted_image = invert_image(original_image)\n \n-    # Display the original and inverted images\n-    cv.imshow('Original Image', imageFile)\n+    # Display the inverted image\n     cv.imshow('Inverted Image', inverted_image)\n     cv.waitKey(0)\n     cv.destroyAllWindows()\n+\n+    # Print the pixel values of the first few pixels in the original image\n+    print(\"Original Image Data:\")\n+    for i in range(min(5, original_image.shape[0])):\n+        for j in range(min(5, original_image.shape[1])):\n+            print(original_image[i, j])\n+\n+    # Print the pixel values of the first few pixels in the inverted image\n+    print(\"\\nInverted Image Data:\")\n+    for i in range(min(5, inverted_image.shape[0])):\n+        for j in range(min(5, inverted_image.shape[1])):\n+            print(inverted_image[i, j])\n"
                },
                {
                    "date": 1702553003565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import cv2 as cv\n+\n+def invert_colors(image):\n+    \"\"\"\n+    Inverts the colors of the given image.\n+\n+    Parameters:\n+    - image: The input image (NumPy array).\n+\n+    Returns:\n+    - inverted_image: The image with inverted colors.\n+    \"\"\"\n+    return 255 - image\n+\n+def main():\n+    # Read the original image from file\n+    original_image = cv.imread('img/img1.jpg')\n+\n+    if original_image is None:\n+        print(\"Error: Could not read the original image.\")\n+        return\n+\n+    # Invert the colors\n+    inverted_image = invert_colors(original_image)\n+\n+    # Display the original and inverted images\n+    cv.imshow('Original Image', original_image)\n+    cv.imshow('Inverted Image', inverted_image)\n+    cv.waitKey(0)\n+    cv.destroyAllWindows()\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1702553038643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     return 255 - image\n \n def main():\n     # Read the original image from file\n-    original_image = cv.imread('img/img1.jpg')\n+    original_image = cv.imread('./images/fruit4.jpg')\n \n     if original_image is None:\n         print(\"Error: Could not read the original image.\")\n         return\n"
                },
                {
                    "date": 1702553388249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,133 +1,32 @@\n import cv2 as cv\n \n def invert_colors(image):\n-    \"\"\"\n-    Inverts the colors of the given image.\n-\n-    Parameters:\n-    - image: The input image (NumPy array).\n-\n-    Returns:\n-    - inverted_image: The image with inverted colors.\n-    \"\"\"\n-    return 255 - image\n-\n-def main():\n-    # Read the original image from file\n-    original_image = cv.imread('./images/fruit4.jpg')\n-\n-    if original_image is None:\n-        print(\"Error: Could not read the original image.\")\n-        return\n-\n-    # Invert the colors\n-    inverted_image = invert_colors(original_image)\n-\n-    # Display the original and inverted images\n-    cv.imshow('Original Image', original_image)\n-    cv.imshow('Inverted Image', inverted_image)\n-    cv.waitKey(0)\n-    cv.destroyAllWindows()\n-\n-if __name__ == \"__main__\":\n-    main()\n-import cv2 as cv\n-\n-def invert_image(image):\n     height, width = image.shape[:2]\n-\n+    \n     for h in range(height):\n         for w in range(width):\n-            # Invert each color channel\n             B = 255 - image[h, w, 0]\n             G = 255 - image[h, w, 1]\n             R = 255 - image[h, w, 2]\n \n-            # Update the pixel values in the image\n             image[h, w, 0] = B\n             image[h, w, 1] = G\n             image[h, w, 2] = R\n \n     return image\n \n-# Load an image from file\n+# Read the original image from file\n original_image = cv.imread('./images/fruit4.jpg')\n \n+# Check if the image is successfully loaded\n if original_image is None:\n     print(\"Error: Could not read the original image.\")\n else:\n-    # Display the original image\n-    cv.imshow('Original Image', original_image)\n-    cv.waitKey(0)\n-    cv.destroyAllWindows()\n+    # Invert the colors using the function\n+    inverted_image = invert_colors(original_image)\n \n-    # Call the function to invert the image\n-    inverted_image = invert_image(original_image)\n-\n-    # Display the inverted image\n-    cv.imshow('Inverted Image', inverted_image)\n-    cv.waitKey(0)\n-    cv.destroyAllWindows()\n-\n-    # Print the pixel values of the first few pixels in the original image\n-    print(\"Original Image Data:\")\n-    for i in range(min(5, original_image.shape[0])):\n-        for j in range(min(5, original_image.shape[1])):\n-            print(original_image[i, j])\n-\n-    # Print the pixel values of the first few pixels in the inverted image\n-    print(\"\\nInverted Image Data:\")\n-    for i in range(min(5, inverted_image.shape[0])):\n-        for j in range(min(5, inverted_image.shape[1])):\n-            print(inverted_image[i, j])\n-import cv2 as cv\n-\n-def invert_image(image):\n-    height, width = image.shape[:2]\n-\n-    for h in range(height):\n-        for w in range(width):\n-            # Invert each color channel\n-            B = 255 - image[h, w, 0]\n-            G = 255 - image[h, w, 1]\n-            R = 255 - image[h, w, 2]\n-\n-            # Update the pixel values in the image\n-            image[h, w, 0] = B\n-            image[h, w, 1] = G\n-            image[h, w, 2] = R\n-\n-    return image\n-\n-# Load an image\n-imageFile = cv.imread('./images/fruit4.jpg')\n-\n-# Call the function to invert the image\n-inverted_image = invert_image(imageFile)\n-\n-# Display the original and inverted images\n-cv.imshow('Original Image', imageFile)\n+    # Display the original and inverted images\n+cv.imshow('Original Image', original_image)\n cv.imshow('Inverted Image', inverted_image)\n cv.waitKey(0)\n cv.destroyAllWindows()\n-import cv2 as cv\n-\n-imageFile = cv.imread('./images/fruit4.jpg')\n-\n-height = imageFile.shape[0]\n-width = imageFile.shape[1]\n-\n-for h in range(height):\n-    for w in range(width):\n-        B = 255 - imageFile[h,w, 0]\n-        G = 255 - imageFile[h,w, 1]\n-        R = 255 - imageFile[h,w, 2]\n-        \n-        imageFile[h,w, 0] = B\n\\ No newline at end of file\n-        imageFile[h,w, 1] = G\n-        imageFile[h,w, 2] = R\n-\n-cv.imshow('Orignal Image', imageFile)        \n-cv.imshow('Image Inversion from BGR', imageFile)\n-cv.waitKey(0)\n-cv.destroyAllWindows()\n"
                },
                {
                    "date": 1702553568474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,32 @@\n+import cv2 as cv\n+\n+def invert_colors(FileImage):\n+    height, width = FileImage.shape[:2]\n+    \n+    for h in range(height):\n+        for w in range(width):\n+            B = 255 - FileImage[h][w][0]\n+            G = 255 - FileImage[h][w][1]\n+            R = 255 - FileImage[h][w][2]\n+\n+            FileImage[h][w][0] = B\n+            FileImage[h][w][1] = G\n+            FileImage[h][w][2] = R\n+\n+    return FileImage\n+\n+# Read the original image from file\n+original_image = cv.imread('./images/fruit4.jpg')\n+\n+# Check if the image is successfully loaded\n+if original_image is None:\n+    print(\"Error: Could not read the original image.\")\n+else:\n+    # Invert the colors using the function\n+    inverted_image = invert_colors(original_image)\n+\n+    # Display the original and inverted images\n+cv.imshow('Original Image', original_image)\n+cv.imshow('Inverted Image', inverted_image)\n+cv.waitKey(0)\n+cv.destroyAllWindows()\n"
                },
                {
                    "date": 1702553613885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,64 +1,33 @@\n import cv2 as cv\n \n-def invert_colors(FileImage):\n-    height, width = FileImage.shape[:2]\n-    \n-    for h in range(height):\n-        for w in range(width):\n-            B = 255 - FileImage[h][w][0]\n-            G = 255 - FileImage[h][w][1]\n-            R = 255 - FileImage[h][w][2]\n+def invert_colors(image):\n+    \"\"\"\n+    Inverts the colors of the given image.\n \n-            FileImage[h][w][0] = B\n-            FileImage[h][w][1] = G\n-            FileImage[h][w][2] = R\n+    Parameters:\n+    - image: The input image (NumPy array).\n \n-    return FileImage\n+    Returns:\n+    - inverted_image: The image with inverted colors.\n+    \"\"\"\n+    return 255 - image\n \n-# Read the original image from file\n-original_image = cv.imread('./images/fruit4.jpg')\n+def main():\n+    # Read the original image from file\n+    original_image = cv.imread('./images/fruit4.jpg')\n \n-# Check if the image is successfully loaded\n-if original_image is None:\n-    print(\"Error: Could not read the original image.\")\n-else:\n-    # Invert the colors using the function\n+    if original_image is None:\n+        print(\"Error: Could not read the original image.\")\n+        return\n+\n+    # Invert the colors\n     inverted_image = invert_colors(original_image)\n \n     # Display the original and inverted images\n-cv.imshow('Original Image', original_image)\n-cv.imshow('Inverted Image', inverted_image)\n-cv.waitKey(0)\n-cv.destroyAllWindows()\n-import cv2 as cv\n+    cv.imshow('Original Image', original_image)\n+    cv.imshow('Inverted Image', inverted_image)\n+    cv.waitKey(0)\n+    cv.destroyAllWindows()\n \n-def invert_colors(image):\n-    height, width = image.shape[:2]\n-    \n-    for h in range(height):\n-        for w in range(width):\n-            B = 255 - image[h, w, 0]\n-            G = 255 - image[h, w, 1]\n-            R = 255 - image[h, w, 2]\n-\n-            image[h, w, 0] = B\n-            image[h, w, 1] = G\n-            image[h, w, 2] = R\n-\n-    return image\n-\n-# Read the original image from file\n-original_image = cv.imread('./images/fruit4.jpg')\n-\n-# Check if the image is successfully loaded\n-if original_image is None:\n-    print(\"Error: Could not read the original image.\")\n-else:\n-    # Invert the colors using the function\n-    inverted_image = invert_colors(original_image)\n-\n-    # Display the original and inverted images\n-cv.imshow('Original Image', original_image)\n-cv.imshow('Inverted Image', inverted_image)\n-cv.waitKey(0)\n-cv.destroyAllWindows()\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1702553649970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,33 @@\n+import cv2 as cv\n+\n+def invert_colors(image):\n+    \"\"\"\n+    Inverts the colors of the given image.\n+\n+    Parameters:\n+    - image: The input image (NumPy array).\n+\n+    Returns:\n+    - inverted_image: The image with inverted colors.\n+    \"\"\"\n+    return 255 - image\n+\n+def main():\n+    # Read the original image from file\n+    original_image = cv.imread('./images/fruit4.jpg')\n+\n+    if original_image is None:\n+        print(\"Error: Could not read the original image.\")\n+        return\n+\n+    # Invert the colors\n+    inverted_image = invert_colors(original_image)\n+\n+    # Display the original and inverted images\n+    cv.imshow('Original Image', original_image)\n+    cv.imshow('Inverted Image', inverted_image)\n+    cv.waitKey(0)\n+    cv.destroyAllWindows()\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1702553657320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import cv2 as cv\n+\n+def invert_colors(image):\n+    return 255 - image\n+\n+def main():\n+    # Read the original image from file\n+    original_image = cv.imread('./images/fruit4.jpg')\n+\n+    if original_image is None:\n+        print(\"Error: Could not read the original image.\")\n+        return\n+\n+    # Invert the colors\n+    inverted_image = invert_colors(original_image)\n+\n+    # Display the original and inverted images\n+    cv.imshow('Original Image', original_image)\n+    cv.imshow('Inverted Image', inverted_image)\n+    cv.waitKey(0)\n+    cv.destroyAllWindows()\n+\n+if __name__ == \"__main__\":\n+    main()\n"
                },
                {
                    "date": 1702553760976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,27 @@\n import cv2 as cv\n \n def invert_colors(image):\n-    return 255 - image\n+    height, width, channels = image.shape\n+    inverted_image = image.copy()\n \n-def main():\n-    # Read the original image from file\n-    original_image = cv.imread('./images/fruit4.jpg')\n+    for h in range(height):\n+        for w in range(width):\n+            for c in range(channels):\n+                inverted_image[h, w, c] = 255 - image[h, w, c]\n \n-    if original_image is None:\n-        print(\"Error: Could not read the original image.\")\n-        return\n+    return inverted_image\n \n+# Read the original image from file\n+original_image = cv.imread('./images/fruit4.jpg')\n+\n+if original_image is None:\n+    print(\"Error: Could not read the original image.\")\n+else:\n     # Invert the colors\n     inverted_image = invert_colors(original_image)\n \n     # Display the original and inverted images\n     cv.imshow('Original Image', original_image)\n     cv.imshow('Inverted Image', inverted_image)\n     cv.waitKey(0)\n     cv.destroyAllWindows()\n-\n-if __name__ == \"__main__\":\n-    main()\n"
                }
            ],
            "date": 1702542968258,
            "name": "Commit-0",
            "content": "import cv2 as cv\n\nimage = cv.imread('./images/Pic1.jpg')\n\nheight, width = image.shape[:2]\n\nfor h in range(height):\n    for w in range(width):\n        B = 255 - image[h,w, 0]\n        G = 255 - image[h,w, 1]\n        R = 255 - image[h,w, 2]\n        \n        image[h,w, 0] = B\n        image[h,w, 1] = G\n        image[h,w, 2] = R\n\ncv.imshow('Test', image)\ncv.waitKey(0)\ncv.destroyAllWindows()\n    "
        }
    ]
}